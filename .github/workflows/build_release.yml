name: Build and Release Project

on:
  push:
    branches:
      - main

env:
  VERSION: 1.20.4

jobs:
  build_and_release_windows:
    runs-on: windows-2022
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.8
      
      - name: Install dependencies
        run: |
          git tag ${{ env.VERSION }}
          git push origin ${{ env.VERSION }}
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Fetch Pillow files
        run: |
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/python-pillow/Pillow/10.2.0/src/libImaging/Imaging.h" -OutFile "Imaging.h"
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/python-pillow/Pillow/10.2.0/src/libImaging/ImagingUtils.h" -OutFile "ImagingUtils.h"
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/python-pillow/Pillow/10.2.0/src/libImaging/ImPlatform.h" -OutFile "ImPlatform.h"
      
      - name: Build project for Windows
        run: |
          python setup.py build
          pyinstaller overviewer.spec
      
      - name: Create ZIP file for Windows
        run: |
          Compress-Archive -Path .\dist\overviewer -DestinationPath overviewer-${{ env.VERSION }}-windows.zip

      - name: Create Release for Windows
        id: create_release_windows
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release v${{ env.VERSION }}
          body: |
            Created using [The Minecraft Overviewer v1.20.4](https://github.com/GregoryAM-SP/The-Minecraft-Overviewer/releases/tag/v1.20.4)
          draft: false
          prerelease: false

      - name: Upload Windows Release Asset
        id: upload_windows_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release_windows.outputs.upload_url }}
          asset_path: ./overviewer-${{ env.VERSION }}-windows.zip
          asset_name: overviewer-${{ env.VERSION }}-windows.zip
          asset_content_type: application/zip

    outputs:
        upload_url: ${{ steps.create_release_windows.outputs.upload_url }}

  build_and_release_linux:
    runs-on: ubuntu-22.04
    needs: build_and_release_windows
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
            fetch-depth: 0
                  
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
            python-version: 3.8
                  
      - name: Install dependencies
        run: pip install -r requirements.txt
              
      - name: Fetch Pillow files
        run: |
            curl -o Imaging.h https://raw.githubusercontent.com/python-pillow/Pillow/10.2.0/src/libImaging/Imaging.h
            curl -o ImagingUtils.h https://raw.githubusercontent.com/python-pillow/Pillow/10.2.0/src/libImaging/ImagingUtils.h
            curl -o ImPlatform.h https://raw.githubusercontent.com/python-pillow/Pillow/10.2.0/src/libImaging/ImPlatform.h
              
      - name: Build project for Linux
        run: |
            python setup.py build
            pyinstaller overviewer.spec
              
      - name: Create tar.xz archive for Linux
        run: |
            cd dist
            tar -cf overviewer-${{ env.VERSION }}-linux.tar overviewer
            xz -z overviewer-${{ env.VERSION }}-linux.tar
            mv overviewer-${{ env.VERSION }}-linux.tar.xz ../overviewer-${{ env.VERSION }}-linux.tar.xz

      - name: Get upload URL
        run: 'echo "Upload URL: ${{ needs.build_and_release_windows.outputs.upload_url }}"'
              
      - name: Upload Linux Release Asset
        id: upload_linux_asset
        uses: actions/upload-release-asset@v1
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.build_and_release_windows.outputs.upload_url }}
          asset_path: ./overviewer-${{ env.VERSION }}-linux.tar.xz
          asset_name: overviewer-${{ env.VERSION }}-linux.tar.xz
          asset_content_type: application/x-xz

  run_on_arch:
    runs-on: ubuntu-22.04
    needs: build_and_release_windows
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    name: Build on all architectures
    strategy:
      matrix:
        include:
          - arch: armv6
          - arch: armv7
          - arch: aarch64
          - arch: riscv64
          - arch: s390x
          - arch: ppc64le
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run on Arch
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: ${{ matrix.arch }}
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          run: |
            uname -a
            echo "Running on ${{ matrix.arch }}"
            sudo DEBIAN_FRONTEND=noninteractive apt-get -y install zlib1g-dev libjpeg-dev devscripts python3-all-dev debhelper python3-pil python3-numpy dh-python
            python -m pip install numpy Pillow==10.2.0
            git clone --branch=10.2.0 --depth=1 https://github.com/python-pillow/Pillow.git /tmp/pillow_checkout
            env PIL_INCLUDE_DIR=/tmp/pillow_checkout/src/libImaging/ python setup.py build
            env DEB_BUILD_OPTIONS=nocheck debuild -i -us -uc -b -Zxz
            ls -l ../*.deb

      - name: Upload Release Asset
        id: upload_release_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.build_and_release_windows.outputs.upload_url  }}
          asset_path: ../*.deb
          asset_name: overviewer-${{env.VERSION}}-${{ matrix.arch }}.deb
          asset_content_type: application/octet-stream

